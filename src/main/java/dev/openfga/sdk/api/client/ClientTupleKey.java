/*
 * OpenFGA
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package dev.openfga.sdk.api.client;

import dev.openfga.sdk.api.model.ContextualTupleKeys;
import dev.openfga.sdk.api.model.TupleKey;
import dev.openfga.sdk.api.model.TupleKeys;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class ClientTupleKey {
    private String user;
    private String relation;
    private String _object;

    public ClientTupleKey _object(String _object) {
        this._object = _object;
        return this;
    }

    /**
     * Get _object
     * @return _object
     **/
    public String getObject() {
        return _object;
    }

    public ClientTupleKey relation(String relation) {
        this.relation = relation;
        return this;
    }

    /**
     * Get relation
     * @return relation
     **/
    public String getRelation() {
        return relation;
    }

    public ClientTupleKey user(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get user
     * @return user
     **/
    public String getUser() {
        return user;
    }

    public TupleKey asTupleKey() {
        return new TupleKey().user(user).relation(relation)._object(_object);
    }

    public static Optional<TupleKeys> asTupleKeys(List<ClientTupleKey> clientTupleKeys) {
        if (clientTupleKeys == null || clientTupleKeys.size() == 0) {
            return Optional.empty();
        }

        return Optional.of(new TupleKeys().tupleKeys(asListOfTupleKey(clientTupleKeys)));
    }

    public static ContextualTupleKeys asContextualTupleKeys(List<ClientTupleKey> clientTupleKeys) {
        if (clientTupleKeys == null || clientTupleKeys.size() == 0) {
            return new ContextualTupleKeys();
        }

        return new ContextualTupleKeys().tupleKeys(asListOfTupleKey(clientTupleKeys));
    }

    private static List<TupleKey> asListOfTupleKey(List<ClientTupleKey> clientTupleKeys) {
        return clientTupleKeys.stream().map(ClientTupleKey::asTupleKey).collect(Collectors.toList());
    }
}
